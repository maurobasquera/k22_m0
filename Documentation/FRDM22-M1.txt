=============================================================================
List of generated methods in project: FRDM22-M1

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "blue"      (component LED)
   - blue_On -This turns the LED on.
   - blue_Off -This turns the LED off.
   - blue_Neg -This negates/toggles the LED
   - blue_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - blue_Put -Turns the LED on or off.
   - blue_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - blue_Deinit -Deinitializes the driver
   - blue_Init -Performs the LED driver initialization.

Module "delay"     (component Wait)
   - delay_Wait10Cycles -Wait for 10 CPU cycles.
   - delay_Wait100Cycles -Wait for 100 CPU cycles.
   - delay_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - delay_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - delay_Waitms -Wait for a specified time in milliseconds.
   - delay_Waitus -Wait for a specified time in microseconds.
   - delay_Waitns -Wait for a specified time in nano seconds.
   - delay_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "sleepModbus" (component Wait)
   - sleepModbus_Wait10Cycles -Wait for 10 CPU cycles.
   - sleepModbus_Wait100Cycles -Wait for 100 CPU cycles.
   - sleepModbus_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - sleepModbus_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - sleepModbus_Waitms -Wait for a specified time in milliseconds.
   - sleepModbus_Waitus -Wait for a specified time in microseconds.
   - sleepModbus_Waitns -Wait for a specified time in nano seconds.
   - sleepModbus_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "indicationModbus" (component BitIO)
   - indicationModbus_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is 
                read and returned. If the direction is [output] then the last written value is returned (see <Safe mode> 
                property for limitations). This method cannot be disabled if direction is [input].
   - indicationModbus_PutVal -The specified output value is set. If the direction is [input], the component saves the value to 
                a memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - indicationModbus_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - indicationModbus_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "enableModbus" (component BitIO)
   - enableModbus_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read 
                and returned. If the direction is [output] then the last written value is returned (see <Safe mode> property 
                for limitations). This method cannot be disabled if direction is [input].
   - enableModbus_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - enableModbus_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - enableModbus_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.

Module "modbusSerial" (component AsynchroSerial)
   - modbusSerial_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - modbusSerial_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - modbusSerial_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental 
                error), otherwise it returns an error code (it does not wait for data).  This method is available only if 
                non-zero length of the input buffer is defined and the receiver property is enabled.  If less than requested 
                number of characters is received only the available data is copied from the receive buffer to the user 
                specified destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter 
                is set to the number of received characters.
   - modbusSerial_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of 
                the output buffer is defined and the transmitter property is enabled.
   - modbusSerial_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer 
                is defined and the receiver property is enabled.
   - modbusSerial_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output 
                buffer is defined and the receiver property is enabled.
   - modbusSerial_CharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.  [deprecated method]
   - modbusSerial_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - modbusSerial_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_SetEventMask -Enables/disables event(s). The events contained within the mask are enabled. Events not contained within 
                the mask are disabled. The component event masks are defined in the PE_Types.h file. Note: Event that are not 
                generated (See the "Events" tab in the Component inspector) are not handled by this method. In this case the 
                method returns ERR_PARAM_MASK error code. See also method <GetEventMask>.
   - TU1_GetEventMask -Returns current events mask. Note: Event that are not generated (See the "Events" tab in the Component 
                inspector) are not handled by this method. See also method <SetEventMask>.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "MCUC1"     (component McuLibConfig)

Module "KSDK1"     (component KinetisSDK)

Module "timeout"   (component FreeCntr32)
   - timeout_Reset -This method clears the counter.
   - timeout_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - timeout_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "timestamp" (component TimerUnit_LDD)
   - timestamp_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.

Module "reset"     (component GPIO_LDD)
   - reset_Init -This method initializes the associated peripheral(s) and the component internal variables. The method is 
                called automatically as a part of the application initialization code.
   - reset_SetFieldValue -This method sets the output data value of the specified bit field.
   - reset_GetFieldValue -This method returns the current input data of the specified field.
   - reset_ClearFieldBits -This method drives the specified bits of the specified bit field to the inactive level.
   - reset_SetFieldBits -This method drives the specified bits of the specified bit field to the active level.
   - reset_ToggleFieldBits -This method inverts the specified bits of the specified bit field to other level.

Module "red"       (component LED)
   - red_On -This turns the LED on.
   - red_Off -This turns the LED off.
   - red_Neg -This negates/toggles the LED
   - red_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - red_Put -Turns the LED on or off.
   - red_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - red_Deinit -Deinitializes the driver
   - red_Init -Performs the LED driver initialization.

Module "green"     (component LED)
   - green_On -This turns the LED on.
   - green_Off -This turns the LED off.
   - green_Neg -This negates/toggles the LED
   - green_Get -This returns logical 1 in case the LED is on, 0 otherwise.
   - green_Put -Turns the LED on or off.
   - green_SetRatio16 -Method to specify the duty cycle. If using a PWM pin, this means the duty cycle is set. For On/off pins, 
                values smaller 0x7FFF means off, while values greater means on.
   - green_Deinit -Deinitializes the driver
   - green_Init -Performs the LED driver initialization.

Module "Cpu"       (component MK22FN512LH12)

===================================================================================
